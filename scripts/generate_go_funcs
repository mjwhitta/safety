#!/usr/bin/env bash

### Helpers begin
check_deps() {
    for d in "${deps[@]}"; do
        [[ -n $(command -v "$d") ]] || errx 128 "$d is not installed"
    done; unset d
}
err() { echo -e "${color:+\e[31m}[!] $*\e[0m"; }
errx() { err "${*:2}"; exit "$1"; }
good() { echo -e "${color:+\e[32m}[+] $*\e[0m"; }
info() { echo -e "${color:+\e[37m}[*] $*\e[0m"; }
long_opt() {
    local arg shift="0"
    case "$1" in
        "--"*"="*) arg="${1#*=}"; [[ -n $arg ]] || usage 127 ;;
        *) shift="1"; shift; [[ $# -gt 0 ]] || usage 127; arg="$1" ;;
    esac
    echo "$arg"
    return $shift
}
subinfo() { echo -e "${color:+\e[36m}[=] $*\e[0m"; }
warn() { echo -e "${color:+\e[33m}[-] $*\e[0m"; }
### Helpers end

generate_type_funcs() {
    local thetype="$1"

    cat <<EOF
// ${thetype^} is a thread-safe $thetype implementation.
type ${thetype^} struct {
	sync.RWMutex
    value $thetype
}

// New${thetype^} will return a pointer to a new ${thetype^} instance.
func New${thetype^}() *${thetype^} {
	return &${thetype^}{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *${thetype^}) CheckSet(expected, newval $thetype) bool {
	p.Lock()
	defer p.Unlock()

    if p.value == expected {
        p.value = newval
        return true
    }

    return false
}

// Get will return the current value.
func (p *${thetype^}) Get() $thetype {
	p.RLock()
	defer p.RUnlock()

    return p.value
}

// Set will set the current value.
func (p *${thetype^}) Set(val $thetype) {
	p.Lock()
	defer p.Unlock()

    p.value = val
}
EOF
}

usage() {
    cat <<EOF
Usage: ${0##*/} [OPTIONS]

Create generated.go

Options:
    -h, --help    Display this help message
    --no-color    Disable colorized output

EOF
    exit "$1"
}

declare -a args deps
unset help
color="true"
deps+=("go")

# Check for missing dependencies
check_deps

# Parse command line options
while [[ $# -gt 0 ]]; do
    case "$1" in
        "--") shift && args+=("$@") && break ;;
        "-h"|"--help") help="true" ;;
        "--no-color") unset color ;;
        *) args+=("$1") ;;
    esac
    shift
done
[[ ${#args[@]} -eq 0 ]] || set -- "${args[@]}"

# Check for valid params
[[ -z $help ]] || usage 0
[[ $# -eq 0 ]] || usage 1

file="generated.go"

cat >"$file" <<EOF
// Code generated by ${0#./}; DO NOT EDIT.
package safety

import "sync"

$(
    for thetype in \
        bool \
        float32 float64 \
        int int8 int16 int32 int64 \
        string \
        uint uint8 uint16 uint32 uint64
    do
        generate_type_funcs $thetype
    done; unset thetype
)
EOF

go fmt "$file"
