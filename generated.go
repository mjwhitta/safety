// Code generated by scripts/generate_go_funcs; DO NOT EDIT.
package safety

import "sync"

// Bool is a thread-safe bool implementation.
type Bool struct {
	sync.RWMutex
	value bool
}

// NewBool will return a pointer to a new Bool instance.
func NewBool() *Bool {
	return &Bool{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Bool) CheckSet(expected, newval bool) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Bool) Get() bool {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Bool) Set(val bool) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Float32 is a thread-safe float32 implementation.
type Float32 struct {
	sync.RWMutex
	value float32
}

// NewFloat32 will return a pointer to a new Float32 instance.
func NewFloat32() *Float32 {
	return &Float32{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Float32) CheckSet(expected, newval float32) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Float32) Get() float32 {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Float32) Set(val float32) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Float32) Add(value float32) float32 {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Float32) Dec() float32 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Float32) Inc() float32 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Float32) Sub(value float32) float32 {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Float32) UnsafeAdd(value float32) float32 {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Float32) UnsafeDec() float32 {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Float32) UnsafeInc() float32 {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Float32) UnsafeSub(value float32) float32 {
	p.value -= value
	return p.value
}

// Float64 is a thread-safe float64 implementation.
type Float64 struct {
	sync.RWMutex
	value float64
}

// NewFloat64 will return a pointer to a new Float64 instance.
func NewFloat64() *Float64 {
	return &Float64{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Float64) CheckSet(expected, newval float64) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Float64) Get() float64 {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Float64) Set(val float64) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Float64) Add(value float64) float64 {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Float64) Dec() float64 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Float64) Inc() float64 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Float64) Sub(value float64) float64 {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Float64) UnsafeAdd(value float64) float64 {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Float64) UnsafeDec() float64 {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Float64) UnsafeInc() float64 {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Float64) UnsafeSub(value float64) float64 {
	p.value -= value
	return p.value
}

// Int is a thread-safe int implementation.
type Int struct {
	sync.RWMutex
	value int
}

// NewInt will return a pointer to a new Int instance.
func NewInt() *Int {
	return &Int{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Int) CheckSet(expected, newval int) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Int) Get() int {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Int) Set(val int) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Int) Add(value int) int {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Int) Dec() int {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Int) Inc() int {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Int) Sub(value int) int {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Int) UnsafeAdd(value int) int {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Int) UnsafeDec() int {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Int) UnsafeInc() int {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Int) UnsafeSub(value int) int {
	p.value -= value
	return p.value
}

// Int8 is a thread-safe int8 implementation.
type Int8 struct {
	sync.RWMutex
	value int8
}

// NewInt8 will return a pointer to a new Int8 instance.
func NewInt8() *Int8 {
	return &Int8{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Int8) CheckSet(expected, newval int8) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Int8) Get() int8 {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Int8) Set(val int8) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Int8) Add(value int8) int8 {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Int8) Dec() int8 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Int8) Inc() int8 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Int8) Sub(value int8) int8 {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Int8) UnsafeAdd(value int8) int8 {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Int8) UnsafeDec() int8 {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Int8) UnsafeInc() int8 {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Int8) UnsafeSub(value int8) int8 {
	p.value -= value
	return p.value
}

// Int16 is a thread-safe int16 implementation.
type Int16 struct {
	sync.RWMutex
	value int16
}

// NewInt16 will return a pointer to a new Int16 instance.
func NewInt16() *Int16 {
	return &Int16{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Int16) CheckSet(expected, newval int16) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Int16) Get() int16 {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Int16) Set(val int16) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Int16) Add(value int16) int16 {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Int16) Dec() int16 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Int16) Inc() int16 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Int16) Sub(value int16) int16 {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Int16) UnsafeAdd(value int16) int16 {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Int16) UnsafeDec() int16 {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Int16) UnsafeInc() int16 {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Int16) UnsafeSub(value int16) int16 {
	p.value -= value
	return p.value
}

// Int32 is a thread-safe int32 implementation.
type Int32 struct {
	sync.RWMutex
	value int32
}

// NewInt32 will return a pointer to a new Int32 instance.
func NewInt32() *Int32 {
	return &Int32{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Int32) CheckSet(expected, newval int32) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Int32) Get() int32 {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Int32) Set(val int32) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Int32) Add(value int32) int32 {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Int32) Dec() int32 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Int32) Inc() int32 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Int32) Sub(value int32) int32 {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Int32) UnsafeAdd(value int32) int32 {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Int32) UnsafeDec() int32 {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Int32) UnsafeInc() int32 {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Int32) UnsafeSub(value int32) int32 {
	p.value -= value
	return p.value
}

// Int64 is a thread-safe int64 implementation.
type Int64 struct {
	sync.RWMutex
	value int64
}

// NewInt64 will return a pointer to a new Int64 instance.
func NewInt64() *Int64 {
	return &Int64{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Int64) CheckSet(expected, newval int64) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Int64) Get() int64 {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Int64) Set(val int64) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Int64) Add(value int64) int64 {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Int64) Dec() int64 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Int64) Inc() int64 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Int64) Sub(value int64) int64 {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Int64) UnsafeAdd(value int64) int64 {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Int64) UnsafeDec() int64 {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Int64) UnsafeInc() int64 {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Int64) UnsafeSub(value int64) int64 {
	p.value -= value
	return p.value
}

// String is a thread-safe string implementation.
type String struct {
	sync.RWMutex
	value string
}

// NewString will return a pointer to a new String instance.
func NewString() *String {
	return &String{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *String) CheckSet(expected, newval string) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *String) Get() string {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *String) Set(val string) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Uint is a thread-safe uint implementation.
type Uint struct {
	sync.RWMutex
	value uint
}

// NewUint will return a pointer to a new Uint instance.
func NewUint() *Uint {
	return &Uint{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Uint) CheckSet(expected, newval uint) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Uint) Get() uint {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Uint) Set(val uint) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Uint) Add(value uint) uint {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Uint) Dec() uint {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Uint) Inc() uint {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Uint) Sub(value uint) uint {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Uint) UnsafeAdd(value uint) uint {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Uint) UnsafeDec() uint {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Uint) UnsafeInc() uint {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Uint) UnsafeSub(value uint) uint {
	p.value -= value
	return p.value
}

// Uint8 is a thread-safe uint8 implementation.
type Uint8 struct {
	sync.RWMutex
	value uint8
}

// NewUint8 will return a pointer to a new Uint8 instance.
func NewUint8() *Uint8 {
	return &Uint8{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Uint8) CheckSet(expected, newval uint8) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Uint8) Get() uint8 {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Uint8) Set(val uint8) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Uint8) Add(value uint8) uint8 {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Uint8) Dec() uint8 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Uint8) Inc() uint8 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Uint8) Sub(value uint8) uint8 {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Uint8) UnsafeAdd(value uint8) uint8 {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Uint8) UnsafeDec() uint8 {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Uint8) UnsafeInc() uint8 {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Uint8) UnsafeSub(value uint8) uint8 {
	p.value -= value
	return p.value
}

// Uint16 is a thread-safe uint16 implementation.
type Uint16 struct {
	sync.RWMutex
	value uint16
}

// NewUint16 will return a pointer to a new Uint16 instance.
func NewUint16() *Uint16 {
	return &Uint16{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Uint16) CheckSet(expected, newval uint16) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Uint16) Get() uint16 {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Uint16) Set(val uint16) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Uint16) Add(value uint16) uint16 {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Uint16) Dec() uint16 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Uint16) Inc() uint16 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Uint16) Sub(value uint16) uint16 {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Uint16) UnsafeAdd(value uint16) uint16 {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Uint16) UnsafeDec() uint16 {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Uint16) UnsafeInc() uint16 {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Uint16) UnsafeSub(value uint16) uint16 {
	p.value -= value
	return p.value
}

// Uint32 is a thread-safe uint32 implementation.
type Uint32 struct {
	sync.RWMutex
	value uint32
}

// NewUint32 will return a pointer to a new Uint32 instance.
func NewUint32() *Uint32 {
	return &Uint32{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Uint32) CheckSet(expected, newval uint32) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Uint32) Get() uint32 {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Uint32) Set(val uint32) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Uint32) Add(value uint32) uint32 {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Uint32) Dec() uint32 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Uint32) Inc() uint32 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Uint32) Sub(value uint32) uint32 {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Uint32) UnsafeAdd(value uint32) uint32 {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Uint32) UnsafeDec() uint32 {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Uint32) UnsafeInc() uint32 {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Uint32) UnsafeSub(value uint32) uint32 {
	p.value -= value
	return p.value
}

// Uint64 is a thread-safe uint64 implementation.
type Uint64 struct {
	sync.RWMutex
	value uint64
}

// NewUint64 will return a pointer to a new Uint64 instance.
func NewUint64() *Uint64 {
	return &Uint64{}
}

// CheckSet will check if the value matches the provided value. If it
// matches, it will set a new value and return true, otherwise it will
// simply return false.
func (p *Uint64) CheckSet(expected, newval uint64) bool {
	p.Lock()
	defer p.Unlock()

	if p.value == expected {
		p.value = newval
		return true
	}

	return false
}

// Get will return the current value.
func (p *Uint64) Get() uint64 {
	p.RLock()
	defer p.RUnlock()

	return p.value
}

// Set will set the current value.
func (p *Uint64) Set(val uint64) {
	p.Lock()
	defer p.Unlock()

	p.value = val
}

// Add will add the value and return the new value.
func (p *Uint64) Add(value uint64) uint64 {
	p.Lock()
	defer p.Unlock()

	p.value += value

	return p.value
}

// Dec will decrement the current value by 1 and return the new value.
func (p *Uint64) Dec() uint64 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeSub(1)
}

// Inc will increment the current value by 1 and return the new value.
func (p *Uint64) Inc() uint64 {
	p.Lock()
	defer p.Unlock()

	return p.UnsafeAdd(1)
}

// Sub will subtract the value and return the new value.
func (p *Uint64) Sub(value uint64) uint64 {
	p.Lock()
	defer p.Unlock()

	p.value -= value

	return p.value
}

// UnsafeAdd will add the value and return the new value, with no
// Lock.
func (p *Uint64) UnsafeAdd(value uint64) uint64 {
	p.value += value
	return p.value
}

// UnsafeDec will decrement the current value by 1 and return the new
// value, with no Lock.
func (p *Uint64) UnsafeDec() uint64 {
	return p.UnsafeSub(1)
}

// UnsafeInc will increment the current value by 1 and return the new
// value, with no Lock.
func (p *Uint64) UnsafeInc() uint64 {
	return p.UnsafeAdd(1)
}

// UnsafeSub will subtract the value and return the new value, with no
// Lock.
func (p *Uint64) UnsafeSub(value uint64) uint64 {
	p.value -= value
	return p.value
}
