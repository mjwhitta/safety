// Code generated by scripts/generate_go_funcs; DO NOT EDIT.
package safety

import "sync"

// Bool is a thread-safe bool implementation.
type Bool struct {
	sync.RWMutex
	value bool
}

// NewBool will return a pointer to a new Bool instance.
func NewBool() *Bool {
	return &Bool{}
}

// Get will return the current value.
func (m *Bool) Get() bool {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Bool) Set(val bool) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Float32 is a thread-safe float32 implementation.
type Float32 struct {
	sync.RWMutex
	value float32
}

// NewFloat32 will return a pointer to a new Float32 instance.
func NewFloat32() *Float32 {
	return &Float32{}
}

// Get will return the current value.
func (m *Float32) Get() float32 {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Float32) Set(val float32) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Float64 is a thread-safe float64 implementation.
type Float64 struct {
	sync.RWMutex
	value float64
}

// NewFloat64 will return a pointer to a new Float64 instance.
func NewFloat64() *Float64 {
	return &Float64{}
}

// Get will return the current value.
func (m *Float64) Get() float64 {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Float64) Set(val float64) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Int is a thread-safe int implementation.
type Int struct {
	sync.RWMutex
	value int
}

// NewInt will return a pointer to a new Int instance.
func NewInt() *Int {
	return &Int{}
}

// Get will return the current value.
func (m *Int) Get() int {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Int) Set(val int) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Int8 is a thread-safe int8 implementation.
type Int8 struct {
	sync.RWMutex
	value int8
}

// NewInt8 will return a pointer to a new Int8 instance.
func NewInt8() *Int8 {
	return &Int8{}
}

// Get will return the current value.
func (m *Int8) Get() int8 {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Int8) Set(val int8) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Int16 is a thread-safe int16 implementation.
type Int16 struct {
	sync.RWMutex
	value int16
}

// NewInt16 will return a pointer to a new Int16 instance.
func NewInt16() *Int16 {
	return &Int16{}
}

// Get will return the current value.
func (m *Int16) Get() int16 {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Int16) Set(val int16) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Int32 is a thread-safe int32 implementation.
type Int32 struct {
	sync.RWMutex
	value int32
}

// NewInt32 will return a pointer to a new Int32 instance.
func NewInt32() *Int32 {
	return &Int32{}
}

// Get will return the current value.
func (m *Int32) Get() int32 {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Int32) Set(val int32) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Int64 is a thread-safe int64 implementation.
type Int64 struct {
	sync.RWMutex
	value int64
}

// NewInt64 will return a pointer to a new Int64 instance.
func NewInt64() *Int64 {
	return &Int64{}
}

// Get will return the current value.
func (m *Int64) Get() int64 {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Int64) Set(val int64) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// String is a thread-safe string implementation.
type String struct {
	sync.RWMutex
	value string
}

// NewString will return a pointer to a new String instance.
func NewString() *String {
	return &String{}
}

// Get will return the current value.
func (m *String) Get() string {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *String) Set(val string) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Uint is a thread-safe uint implementation.
type Uint struct {
	sync.RWMutex
	value uint
}

// NewUint will return a pointer to a new Uint instance.
func NewUint() *Uint {
	return &Uint{}
}

// Get will return the current value.
func (m *Uint) Get() uint {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Uint) Set(val uint) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Uint8 is a thread-safe uint8 implementation.
type Uint8 struct {
	sync.RWMutex
	value uint8
}

// NewUint8 will return a pointer to a new Uint8 instance.
func NewUint8() *Uint8 {
	return &Uint8{}
}

// Get will return the current value.
func (m *Uint8) Get() uint8 {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Uint8) Set(val uint8) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Uint16 is a thread-safe uint16 implementation.
type Uint16 struct {
	sync.RWMutex
	value uint16
}

// NewUint16 will return a pointer to a new Uint16 instance.
func NewUint16() *Uint16 {
	return &Uint16{}
}

// Get will return the current value.
func (m *Uint16) Get() uint16 {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Uint16) Set(val uint16) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Uint32 is a thread-safe uint32 implementation.
type Uint32 struct {
	sync.RWMutex
	value uint32
}

// NewUint32 will return a pointer to a new Uint32 instance.
func NewUint32() *Uint32 {
	return &Uint32{}
}

// Get will return the current value.
func (m *Uint32) Get() uint32 {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Uint32) Set(val uint32) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}

// Uint64 is a thread-safe uint64 implementation.
type Uint64 struct {
	sync.RWMutex
	value uint64
}

// NewUint64 will return a pointer to a new Uint64 instance.
func NewUint64() *Uint64 {
	return &Uint64{}
}

// Get will return the current value.
func (m *Uint64) Get() uint64 {
	m.RLock()
	defer m.RUnlock()

	return m.value
}

// Set will set the current value.
func (m *Uint64) Set(val uint64) {
	m.Lock()
	defer m.Unlock()

	m.value = val
}
